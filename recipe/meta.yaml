{% set name = "unidist" %}
{% set version = "0.3.0" %}

package:
  name: {{ name }}-packages
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{ name[0] }}/{{ name }}/{{ name }}-{{ version }}.tar.gz
  sha256: 113eda26b2f0ada163128d3af02a9dcfe85121257d17a250687e1fc48c59fc27

build:
  noarch: python
  number: 0

# the outputs map the unidist options on PyPI (see upstream definition
# https://github.com/modin-project/unidist/blob/0.2.0/setup.py#L6-L11)
# from "unidist[<option>]" to "unidist-<option>" as a conda-forge package
outputs:
  - name: unidist-all
    build:
      noarch: python
    requirements:
      host:
        - python >=3.7.1
      run:
        - python >=3.7.1
        - {{ pin_subpackage('unidist', exact=True) }}
        - {{ pin_subpackage('unidist-dask', exact=True) }}
        - {{ pin_subpackage('unidist-ray', exact=True) }}
        - {{ pin_subpackage('unidist-mpi', exact=True) }}
    test:
      imports:
        # dummy test; actual tests are in subpackages
        - unidist

  - name: unidist
    build:
      noarch: python
      script: python -m pip install . --ignore-installed -vv
    requirements:
      host:
        - pip
        - python >=3.7.1
      run:
        - python >=3.7.1
        - packaging
        - cloudpickle
    test:
      imports:
        - unidist
      commands:
        # unidist has multiprocessing and python backends by default so we test both
        - python -c "import unidist; import unidist.config as cfg; cfg.Backend.put('python'); unidist.init(); ref = unidist.put(1); unidist.get(ref)"
        - python -c "import unidist; import unidist.config as cfg; cfg.Backend.put('multiprocessing'); unidist.init(); ref = unidist.put(1); unidist.get(ref)"

  - name: unidist-dask
    build:
      noarch: python
    requirements:
      host:
        - python >=3.7.1
      run:
        - python >=3.7.1
        - {{ pin_subpackage('unidist', exact=True) }}
        - dask >=2.22.0
        - distributed >=2.22.0
    test:
      imports:
        - unidist
      commands:
        - python -c "import unidist; import unidist.config as cfg; cfg.Backend.put('dask'); unidist.init(); ref = unidist.put(1); unidist.get(ref)"

  - name: unidist-ray
    build:
      noarch: python
    requirements:
      host:
        - python >=3.7.1
      run:
        - python >=3.7.1
        - {{ pin_subpackage('unidist', exact=True) }}
        - ray-default >=1.4.0
        # aioredis 2.x breaks Ray
        # ref: https://github.com/conda-forge/ray-packages-feedstock/issues/38
        - aioredis <2
    test:
      imports:
        - unidist
      commands:
        - python -c "import unidist; import unidist.config as cfg; cfg.Backend.put('ray'); unidist.init(); ref = unidist.put(1); unidist.get(ref)"

  - name: unidist-mpi
    build:
      noarch: python
    requirements:
      host:
        - python >=3.7.1
      run:
        - python >=3.7.1
        - {{ pin_subpackage('unidist', exact=True) }}
        - mpi4py >=3.0.3
        - msgpack-python >=1.0.0
    test:
      # Currently we do not run actual tests for mpi backend because
      # MPI requires more graceful set up to be run in docker container.
      # Try out to find a fix.
      imports:
        - unidist

about:
  home: https://github.com/modin-project/unidist
  license: Apache-2.0 AND LicenseRef-Public-Domain
  license_family: Apache
  license_file:
    - LICENSE
    - licenses/versioneer-LICENSE.txt
  summary: Unified Distributed Execution
  description: |
    unidist is a framework that is intended to provide the unified API
    for distributed execution by supporting various performant execution backends.
    At the moment the following backends are supported under the hood:
    Ray, MPI, Dask, Python Multiprocessing, as well as a sequential Python backend for debugging.
  doc_url: https://unidist.readthedocs.io/
  dev_url: https://github.com/modin-project/unidist

extra:
  recipe-maintainers:
    - YarShev
